### Stack Overview

A **Stack** in Java is a subclass of `Vector` that implements a last-in-first-out (LIFO) stack of elements. This means that the most recently added element is the first one to be removed. The `Stack` class is part of the Java Collections Framework and inherits the synchronization properties of `Vector`, making it thread-safe.

### Characteristics of Stack

1. **LIFO Order**: Elements are accessed in last-in-first-out order.
2. **Allows Null Elements**: You can store null values in a Stack.
3. **Thread-Safe**: Methods are synchronized, ensuring safe access by multiple threads.

### Key Methods in Stack

#### 1. `push(E item)`

This method pushes an item onto the top of the stack.

```java
Stack<String> stack = new Stack<>();
stack.push("A");
stack.push("B");
stack.push("C");
// Stack is now: ["A", "B", "C"]
```

#### 2. `pop()`

This method removes the object at the top of the stack and returns that object.

```java
String topElement = stack.pop();
// topElement is "C"
// Stack is now: ["A", "B"]
```

#### 3. `peek()`

This method looks at the object at the top of the stack without removing it from the stack.

```java
String topElement = stack.peek();
// topElement is "B"
// Stack is still: ["A", "B"]
```

#### 4. `empty()`

This method tests if the stack is empty.

```java
boolean isEmpty = stack.empty();
// isEmpty is false
```

#### 5. `search(Object o)`

This method returns the 1-based position from the top of the stack where the object is located; the return value -1 indicates that the object is not on the stack.

```java
int position = stack.search("A");
// position is 2
```

### Example Usage

Here's a complete example demonstrating the usage of various Stack methods:

```java
import java.util.Stack;

public class StackExample {
    public static void main(String[] args) {
        // Create a Stack
        Stack<String> stack = new Stack<>();
        
        // Push elements onto the stack
        stack.push("A");
        stack.push("B");
        stack.push("C");
        System.out.println("Initial Stack: " + stack); // Output: [A, B, C]
        
        // Pop the top element
        String topElement = stack.pop();
        System.out.println("Popped Element: " + topElement); // Output: C
        System.out.println("Stack after pop: " + stack); // Output: [A, B]
        
        // Peek at the top element
        topElement = stack.peek();
        System.out.println("Top Element: " + topElement); // Output: B
        System.out.println("Stack after peek: " + stack); // Output: [A, B]
        
        // Check if the stack is empty
        boolean isEmpty = stack.empty();
        System.out.println("Is Stack empty? " + isEmpty); // Output: false
        
        // Search for an element
        int position = stack.search("A");
        System.out.println("Position of 'A': " + position); // Output: 2
        
        // Search for a non-existent element
        position = stack.search("D");
        System.out.println("Position of 'D': " + position); // Output: -1
    }
}
```

### Summary

The `Stack` class in Java provides a simple and efficient way to manage a collection of elements with last-in-first-out (LIFO) access. Key methods include `push` for adding elements, `pop` for removing elements, `peek` for viewing the top element, `empty` for checking if the stack is empty, and `search` for finding the position of an element. The `Stack` class is synchronized, making it thread-safe but potentially slower than non-synchronized collections due to the overhead of synchronization.
