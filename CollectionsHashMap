### HashMap Overview

A **HashMap** in Java is a hash table-based implementation of the `Map` interface. It allows you to store key-value pairs, where each key is unique. HashMap provides constant-time performance for basic operations like `put`, `get`, and `remove`, assuming the hash function disperses the elements properly among the buckets.

### Characteristics of HashMap

1. **Allows Null Keys and Values**: Permits one null key and multiple null values.
2. **Not Thread-Safe**: Requires external synchronization for concurrent access.
3. **Unordered**: Does not maintain any order of the keys or values.

### Key Methods in HashMap

#### 1. `put(K key, V value)`

This method associates the specified value with the specified key in the map. If the map previously contained a mapping for the key, the old value is replaced.

```java
HashMap<String, Integer> map = new HashMap<>();
map.put("A", 1);
map.put("B", 2);
map.put("C", 3);
// HashMap is now: {"A"=1, "B"=2, "C"=3}
```

#### 2. `remove(Object key)`

This method removes the mapping for the specified key from the map if present.

```java
map.remove("B");
// HashMap is now: {"A"=1, "C"=3}
```

#### 3. `get(Object key)`

This method returns the value to which the specified key is mapped, or `null` if the map contains no mapping for the key.

```java
Integer value = map.get("A");
// value is 1

Integer nullValue = map.get("B");
// nullValue is null
```

#### 4. `clear()`

This method removes all the mappings from the map.

```java
map.clear();
// HashMap is now: {}
```

#### 5. `size()`

This method returns the number of key-value mappings in the map.

```java
int size = map.size();
// size is 0 (after clear)
```

#### 6. `isEmpty()`

This method returns `true` if the map contains no key-value mappings.

```java
boolean empty = map.isEmpty();
// empty is true
```

#### 7. `containsKey(Object key)`

This method returns `true` if the map contains a mapping for the specified key.

```java
map.put("A", 1);
boolean hasA = map.containsKey("A");
// hasA is true

boolean hasB = map.containsKey("B");
// hasB is false
```

#### 8. `containsValue(Object value)`

This method returns `true` if the map contains one or more keys mapping to the specified value.

```java
boolean has1 = map.containsValue(1);
// has1 is true

boolean has2 = map.containsValue(2);
// has2 is false
```

#### 9. `keySet()`

This method returns a set view of the keys contained in the map.

```java
Set<String> keys = map.keySet();
// keys is ["A"]
```

#### 10. `values()`

This method returns a collection view of the values contained in the map.

```java
Collection<Integer> values = map.values();
// values is [1]
```

#### 11. `entrySet()`

This method returns a set view of the mappings contained in the map.

```java
Set<Map.Entry<String, Integer>> entries = map.entrySet();
// entries is [{"A"=1}]
```

### Example Usage

Here's a complete example demonstrating the usage of various `HashMap` methods:

```java
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.Collection;

public class HashMapExample {
    public static void main(String[] args) {
        // Create a HashMap
        HashMap<String, Integer> map = new HashMap<>();
        
        // Add elements using put()
        map.put("A", 1);
        map.put("B", 2);
        map.put("C", 3);
        System.out.println("Initial HashMap: " + map); // Output: {A=1, B=2, C=3}
        
        // Remove an element using remove()
        map.remove("B");
        System.out.println("After removing 'B': " + map); // Output: {A=1, C=3}
        
        // Retrieve an element using get()
        Integer value = map.get("A");
        System.out.println("Value for 'A': " + value); // Output: 1
        
        // Check the size of the HashMap
        int size = map.size();
        System.out.println("Size of HashMap: " + size); // Output: 2
        
        // Check if the HashMap is empty
        boolean isEmpty = map.isEmpty();
        System.out.println("Is HashMap empty? " + isEmpty); // Output: false
        
        // Check if a key is present using containsKey()
        boolean containsA = map.containsKey("A");
        System.out.println("Contains key 'A'? " + containsA); // Output: true
        
        // Check if a value is present using containsValue()
        boolean contains1 = map.containsValue(1);
        System.out.println("Contains value 1? " + contains1); // Output: true
        
        // Get the set of keys
        Set<String> keys = map.keySet();
        System.out.println("Keys: " + keys); // Output: [A, C]
        
        // Get the collection of values
        Collection<Integer> values = map.values();
        System.out.println("Values: " + values); // Output: [1, 3]
        
        // Get the set of entries
        Set<Map.Entry<String, Integer>> entries = map.entrySet();
        System.out.println("Entries: " + entries); // Output: [A=1, C=3]
        
        // Clear the HashMap
        map.clear();
        System.out.println("HashMap after clear(): " + map); // Output: {}
    }
}
```

### Summary

The `HashMap` class in Java provides a way to store key-value pairs with unique keys. Key methods include `put` for adding entries, `remove` for deleting entries, `get` for retrieving values, `clear` for removing all entries, `size` and `isEmpty` for checking the size and emptiness of the map, `containsKey` and `containsValue` for checking the presence of keys and values, and `keySet`, `values`, and `entrySet` for getting views of the keys, values, and entries. HashMap is not thread-safe and allows null keys and values.
