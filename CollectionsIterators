### Iterator Overview

An **Iterator** is an interface in Java that provides methods to iterate over a collection of elements. It allows traversal of elements in a forward direction and can also remove elements from the underlying collection during the iteration.

### Key Methods in Iterator

#### 1. `hasNext()`

This method returns `true` if the iteration has more elements. It allows us to check if there are still elements to iterate over.

```java
Iterator<String> iterator = list.iterator();
while (iterator.hasNext()) {
    System.out.println(iterator.next());
}
```

#### 2. `next()`

This method returns the next element in the iteration. It must be called after `hasNext()` returns `true`.

```java
String nextElement = iterator.next();
System.out.println(nextElement);
```

#### 3. `remove()`

This method removes the last element returned by the iterator from the underlying collection. This method can be called only once per call to `next()`.

```java
iterator.remove();
```

### Example Usage

Here's a complete example demonstrating the usage of the `Iterator` interface with an `ArrayList`:

```java
import java.util.ArrayList;
import java.util.Iterator;

public class IteratorExample {
    public static void main(String[] args) {
        // Create an ArrayList
        ArrayList<String> list = new ArrayList<>();
        list.add("A");
        list.add("B");
        list.add("C");
        list.add("D");
        
        // Get an iterator
        Iterator<String> iterator = list.iterator();
        
        // Iterate over the elements
        while (iterator.hasNext()) {
            String element = iterator.next();
            System.out.println(element); // Output: A B C D
            
            // Remove element "C"
            if (element.equals("C")) {
                iterator.remove();
            }
        }
        
        // Print the list after removal
        System.out.println("List after removal: " + list); // Output: [A, B, D]
    }
}
```

### Summary

The `Iterator` interface provides a way to traverse a collection in a forward direction. It includes methods to check for more elements (`hasNext()`), retrieve the next element (`next()`), and remove elements during iteration (`remove()`). This interface is particularly useful for iterating over collections where you need to perform operations like filtering or modifying elements during traversal.
