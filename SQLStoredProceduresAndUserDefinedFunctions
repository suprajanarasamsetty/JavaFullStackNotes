Stored procedures and user-defined functions (UDFs) are both used to encapsulate SQL logic, but they serve different purposes and have distinct characteristics. Here are the key differences between them:

### Stored Procedures

1. **Purpose**:
   - **General-purpose**: Used to perform a wide range of operations, including complex logic, control-of-flow statements, and transactions.
   - **Modifications**: Can perform operations that modify data (INSERT, UPDATE, DELETE).

2. **Return Values**:
   - **Multiple Results**: Can return multiple result sets.
   - **Output Parameters**: Can have multiple output parameters to return values.

3. **Usage**:
   - **Invocation**: Called using the `CALL` statement.
   - **Integration**: Typically used for batch processing, complex transactions, and encapsulating business logic.

4. **SQL Statements**:
   - **Flexibility**: Can contain any valid SQL statement, including data modification and control-of-flow statements like loops and conditionals.

5. **Performance**:
   - **Precompiled**: Stored procedures are often precompiled, leading to performance improvements when the procedure is called multiple times.

6. **Error Handling**:
   - **Robust**: Can include error handling logic using TRY...CATCH blocks.

7. **Security**:
   - **Permissions**: Can encapsulate complex security logic and restrict direct access to the underlying tables.

### User-Defined Functions (UDFs)

1. **Purpose**:
   - **Special-purpose**: Designed to perform specific calculations or transformations, usually returning a single value or a table.
   - **Non-modifying**: Cannot perform operations that modify data.

2. **Return Values**:
   - **Single Result**: Scalar functions return a single value. Table-valued functions return a table.

3. **Usage**:
   - **Invocation**: Called within SQL statements like `SELECT`, `INSERT`, `UPDATE`, or `DELETE`.
   - **Integration**: Used to simplify complex calculations or data retrieval within queries.

4. **SQL Statements**:
   - **Restrictions**: Cannot contain data modification statements (INSERT, UPDATE, DELETE) or control-of-flow statements.

5. **Performance**:
   - **Execution**: Often used to optimize and simplify SQL queries, but might not offer the same performance benefits as stored procedures due to their more specific use cases.

6. **Error Handling**:
   - **Limited**: Error handling within UDFs is more limited compared to stored procedures.

7. **Security**:
   - **Permissions**: UDFs are typically used within queries, so security is managed through the permissions on the function itself and the objects it accesses.

### Detailed Comparison with Examples

#### Stored Procedure Example

**Create a Stored Procedure**:

```sql
DELIMITER //

CREATE PROCEDURE add_employee(
    IN emp_name VARCHAR(50),
    IN emp_salary DECIMAL(10, 2),
    OUT emp_id INT
)
BEGIN
    INSERT INTO employees (name, salary) VALUES (emp_name, emp_salary);
    SET emp_id = LAST_INSERT_ID();
END//

DELIMITER ;
```

**Call the Procedure**:

```sql
CALL add_employee('John Doe', 60000, @new_emp_id);
SELECT @new_emp_id;
```

**Drop the Procedure**:

```sql
DROP PROCEDURE IF EXISTS add_employee;
```

#### User-Defined Function Example

**Create a Scalar Function**:

```sql
DELIMITER //

CREATE FUNCTION calculate_discount_price (
    original_price DECIMAL(10, 2),
    discount_percentage DECIMAL(5, 2)
) RETURNS DECIMAL(10, 2)
BEGIN
    RETURN original_price - (original_price * discount_percentage / 100);
END//

DELIMITER ;
```

**Use the Function**:

```sql
SELECT product_name, price, calculate_discount_price(price, 10) AS discounted_price
FROM products;
```

**Drop the Function**:

```sql
DROP FUNCTION IF EXISTS calculate_discount_price;
```

### Summary of Differences

| Feature                      | Stored Procedures                      | User-Defined Functions            |
|------------------------------|----------------------------------------|-----------------------------------|
| **Purpose**                  | General-purpose operations             | Specific calculations/transformations |
| **Data Modification**        | Can modify data                        | Cannot modify data                |
| **Return Values**            | Multiple result sets, output parameters | Single value or table             |
| **Invocation**               | `CALL` statement                       | Embedded in SQL statements        |
| **SQL Statements**           | Any valid SQL, including DML and control-of-flow | Restricted to SELECT statements, no DML |
| **Performance**              | Often precompiled                      | Used to simplify queries          |
| **Error Handling**           | Robust with TRY...CATCH                | Limited                           |
| **Security**                 | Encapsulate security logic             | Managed through permissions       |

Stored procedures are best suited for complex operations and business logic, while user-defined functions are ideal for reusable calculations and data retrieval operations within queries.
