### Java DateTime API Explained Simply

The Java DateTime API, introduced in Java 8, provides a comprehensive way to handle dates and times. It uses the ISO-8601 standard (Gregorian calendar system) by default. Here are some of the key classes and enums in this API:

#### Key Classes and Enums

1. **Instant:**
   - Represents a specific moment in time (like a timestamp).
   - Useful for precise time measurements.

   ```java
   Instant now = Instant.now();
   System.out.println(now); // Prints the current timestamp
   ```

2. **LocalDate:**
   - Represents a date (year, month, day) without time or timezone.
   - Useful for handling dates like birthdays, holidays, etc.

   ```java
   LocalDate today = LocalDate.now();
   System.out.println(today); // Prints the current date
   ```

3. **LocalDateTime:**
   - Represents both date and time without timezone.
   - Useful for timestamps within a local context.

   ```java
   LocalDateTime now = LocalDateTime.now();
   System.out.println(now); // Prints the current date and time
   ```

4. **ZonedDateTime:**
   - Represents date and time with timezone.
   - Useful for handling dates and times across different time zones.

   ```java
   ZonedDateTime now = ZonedDateTime.now();
   System.out.println(now); // Prints the current date, time, and timezone
   ```

5. **MonthDay:**
   - Represents a month and day (like a yearly recurring event).
   - Useful for dates like anniversaries or monthly bills.

   ```java
   MonthDay birthday = MonthDay.of(7, 25);
   System.out.println(birthday); // Prints --07-25
   ```

6. **Year:**
   - Represents a year.
   - Useful for representing years like 2024, 2025, etc.

   ```java
   Year year = Year.now();
   System.out.println(year); // Prints the current year
   ```

7. **YearMonth:**
   - Represents a combination of year and month.
   - Useful for handling monthly statements or reports.

   ```java
   YearMonth thisMonth = YearMonth.now();
   System.out.println(thisMonth); // Prints the current year and month
   ```

### Summary of the Classes

- **Instant:** Specific moment in time.
- **LocalDate:** Date without time or timezone.
- **LocalDateTime:** Date and time without timezone.
- **ZonedDateTime:** Date and time with timezone.
- **MonthDay:** Month and day without a year.
- **Year:** Only a year.
- **YearMonth:** Combination of year and month.

#### Examples in Use

```java
import java.time.*;

public class DateTimeExamples {
    public static void main(String[] args) {
        // Instant
        Instant nowInstant = Instant.now();
        System.out.println("Instant: " + nowInstant);

        // LocalDate
        LocalDate today = LocalDate.now();
        System.out.println("LocalDate: " + today);

        // LocalDateTime
        LocalDateTime nowLocalDateTime = LocalDateTime.now();
        System.out.println("LocalDateTime: " + nowLocalDateTime);

        // ZonedDateTime
        ZonedDateTime nowZonedDateTime = ZonedDateTime.now();
        System.out.println("ZonedDateTime: " + nowZonedDateTime);

        // MonthDay
        MonthDay birthday = MonthDay.of(7, 25);
        System.out.println("MonthDay: " + birthday);

        // Year
        Year thisYear = Year.now();
        System.out.println("Year: " + thisYear);

        // YearMonth
        YearMonth thisYearMonth = YearMonth.now();
        System.out.println("YearMonth: " + thisYearMonth);
    }
}
```

In this example, we create and print instances of each class, showing how to get the current date, time, and combinations thereof using the Java DateTime API. This API makes it easier to work with dates and times in a clear and consistent way.
