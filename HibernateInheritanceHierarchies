### Inheritance Hierarchies in Hibernate

In Hibernate, mapping inheritance hierarchies allows you to represent object-oriented inheritance structures in a relational database. This process involves deciding how to store the data from an inheritance hierarchy (i.e., a class and its subclasses) in database tables. Hibernate provides different strategies to achieve this:

#### 1. Single Table Inheritance (@Inheritance(strategy = InheritanceType.SINGLE_TABLE))

**Overview**:
- **Single Table Inheritance** maps an entire class hierarchy to a single database table.
- A **discriminator column** is used to differentiate between the types of entities stored in the table.

**How It Works**:
- A single table is used to store data for all classes in the hierarchy.
- The discriminator column helps Hibernate determine which class an instance of data represents.

**Example Scenario**:
Imagine a company has an employee system with different types of employees: `FullTimeEmployee` and `PartTimeEmployee`. Using Single Table Inheritance, you can store all employees in one table:

```java
@Entity
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
@DiscriminatorColumn(name = "employee_type")
public abstract class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;
    private double salary;
    // getters and setters
}

@Entity
@DiscriminatorValue("full_time")
public class FullTimeEmployee extends Employee {
    private double bonus;
    // getters and setters
}

@Entity
@DiscriminatorValue("part_time")
public class PartTimeEmployee extends Employee {
    private int hoursWorked;
    // getters and setters
}
```

**Table Structure**:
```
| id | name     | salary | bonus | hoursWorked | employee_type |
|----|----------|--------|-------|-------------|---------------|
| 1  | Alice    | 60000  | 5000  | NULL        | full_time     |
| 2  | Bob      | 30000  | NULL  | 20          | part_time     |
```

**Advantages**:
- **Simplified Schema**: Only one table to manage.
- **Performance**: Good for querying all types of entities in one go.

**Disadvantages**:
- **Wasted Space**: Columns for different subclasses can contain many null values.
- **Complexity**: The table can become large and difficult to manage if there are many subclasses.

#### 2. Table Per Class (@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS))

**Overview**:
- **Table Per Class** maps each class in the hierarchy to its own table.
- Each table contains the columns for that class and inherits columns from its superclass.

**How It Works**:
- Each class has its own table.
- Subclass tables contain columns from the parent class and additional columns specific to the subclass.

**Example Scenario**:
Continuing with the employee system, Table Per Class would store each employee type in its own table:

```java
@Entity
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
public abstract class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;
    private double salary;
    // getters and setters
}

@Entity
public class FullTimeEmployee extends Employee {
    private double bonus;
    // getters and setters
}

@Entity
public class PartTimeEmployee extends Employee {
    private int hoursWorked;
    // getters and setters
}
```

**Table Structure**:

- **FullTimeEmployee Table**:
```
| id | name  | salary | bonus |
|----|-------|--------|-------|
| 1  | Alice | 60000  | 5000  |
```

- **PartTimeEmployee Table**:
```
| id | name | salary | hoursWorked |
|----|------|--------|-------------|
| 2  | Bob  | 30000  | 20          |
```

**Advantages**:
- **No Null Columns**: Each table has only relevant columns.
- **Clarity**: Tables are easier to understand and manage.

**Disadvantages**:
- **Complex Queries**: To query the entire hierarchy, you need to union results from multiple tables.
- **Potential Redundancy**: Common columns are duplicated across tables.

#### 3. Joined Table (@Inheritance(strategy = InheritanceType.JOINED))

**Overview**:
- **Joined Table** maps each class to its own table and uses foreign key relationships to link subclasses to their parent class.

**How It Works**:
- Each class has its own table.
- Subclass tables contain only subclass-specific fields, while common fields are stored in a parent table.

**Example Scenario**:
Using the same employee system, the Joined Table strategy creates a parent table for common fields and separate tables for each subclass:

```java
@Entity
@Inheritance(strategy = InheritanceType.JOINED)
public abstract class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;
    private double salary;
    // getters and setters
}

@Entity
public class FullTimeEmployee extends Employee {
    private double bonus;
    // getters and setters
}

@Entity
public class PartTimeEmployee extends Employee {
    private int hoursWorked;
    // getters and setters
}
```

**Table Structure**:

- **Employee Table**:
```
| id | name  | salary |
|----|-------|--------|
| 1  | Alice | 60000  |
| 2  | Bob   | 30000  |
```

- **FullTimeEmployee Table**:
```
| id | bonus |
|----|-------|
| 1  | 5000  |
```

- **PartTimeEmployee Table**:
```
| id | hoursWorked |
|----|-------------|
| 2  | 20          |
```

**Advantages**:
- **Normalized Schema**: Avoids redundancy and null columns.
- **Extensible**: Easier to extend the hierarchy with new subclasses.

**Disadvantages**:
- **Complex Queries**: Requires joins to retrieve complete entity data.
- **Performance Overhead**: Joins can introduce additional overhead.

### Summary

- **Single Table Inheritance**: Maps all classes to a single table with a discriminator column. Simple but can lead to many null columns.
- **Table Per Class**: Maps each class to its own table. No null columns, but queries can be complex.
- **Joined Table**: Maps each class to its own table with foreign key relationships. Normalized and extensible, but involves joins for queries.

Choose the strategy that best fits your applicationâ€™s needs based on factors like schema simplicity, performance, and query complexity.
