### Test-Driven Development (TDD)

Test-Driven Development (TDD) is a software development process where you write tests before you write the actual code. It ensures that the code meets its requirements and behaves as expected. TDD follows a repetitive cycle of three main steps:

1. **Write a Test**: Write a test for a small piece of functionality.
2. **Write Code**: Write the minimum amount of code necessary to pass the test.
3. **Refactor**: Refactor the code to improve its structure while keeping all tests passing.

### The TDD Cycle

1. **Red**: Write a failing test.
2. **Green**: Write code to make the test pass.
3. **Refactor**: Improve the code while keeping the test passing.

### Unit Testing vs. Integration Testing

#### Unit Tests

Unit testing involves testing individual components or units of a software application. Each test case is independent and focuses on a single function, method, or class. The goal is to verify that each part of the application behaves as expected.

**Example of Unit Testing:**

Let's say we have a simple `Calculator` class with a method `add`.

```java
public class Calculator {
    public int add(int a, int b) {
        return a + b;
    }
}
```

**Unit Test for `add` method:**

```java
import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class CalculatorTest {
    @Test
    public void testAdd() {
        Calculator calculator = new Calculator();
        int result = calculator.add(2, 3);
        assertEquals(5, result); // Expected result is 5
    }
}
```

In this example:
- We create a `Calculator` object.
- We call the `add` method with arguments `2` and `3`.
- We assert that the result is `5`.

#### Integration Tests

Integration testing examines the interaction between different components or modules of an application. It ensures that integrated units work together correctly.

**Example of Integration Testing:**

Let's say we have two classes, `UserService` and `UserRepository`, that interact with each other.

```java
public class User {
    private String name;

    public User(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}

public class UserRepository {
    public User findUserByName(String name) {
        // Simulate a database lookup
        return new User(name);
    }
}

public class UserService {
    private UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public String getUserName(String name) {
        User user = userRepository.findUserByName(name);
        return user.getName();
    }
}
```

**Integration Test for `UserService` and `UserRepository`:**

```java
import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class UserServiceIntegrationTest {
    @Test
    public void testGetUserName() {
        UserRepository userRepository = new UserRepository();
        UserService userService = new UserService(userRepository);

        String userName = userService.getUserName("Alice");
        assertEquals("Alice", userName); // Expected result is "Alice"
    }
}
```

In this example:
- We create a `UserRepository` object.
- We create a `UserService` object, passing the `UserRepository` object to its constructor.
- We call the `getUserName` method of `UserService` and assert that the result is `"Alice"`.

### Summary

**TDD (Test-Driven Development)**:
- Write tests before writing the code.
- Follow the Red-Green-Refactor cycle.

**Unit Testing**:
- Test individual components.
- Each test focuses on a single function, method, or class.

**Integration Testing**:
- Test interactions between components.
- Ensure that integrated units work together correctly.

By following TDD, you can ensure that your code is well-tested and that each piece of functionality works as expected, both in isolation and when integrated with other parts of the application.
