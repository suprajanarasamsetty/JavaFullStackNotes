Sure! Let's delve into indexes in MySQL, specifically clustered and secondary indexes, with easy-to-understand explanations and detailed real-time examples.

### Clustered Index

**Definition**:
A clustered index determines the physical order of data in the table. There can be only one clustered index per table because the data rows themselves can be sorted in only one order.

**InnoDB Clustered Indexes**:
- **Primary Key**: If a primary key is defined, it becomes the clustered index.
- **Unique Not Null Column**: If no primary key is defined, the first unique and not null column is used as the clustered index.
- **Hidden Clustered Index**: If no primary key or unique index is defined, InnoDB creates a hidden clustered index named `GEN_CLUST_INDEX` on a synthetic column with row IDs.

**Example**:

1. **Table with Primary Key**:

```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50)
);
```

- `employee_id` is the clustered index because it is the primary key.

2. **Table without Primary Key but with Unique Not Null Column**:

```sql
CREATE TABLE products (
    product_code VARCHAR(20) UNIQUE NOT NULL,
    product_name VARCHAR(50),
    price DECIMAL(10, 2)
);
```

- `product_code` is the clustered index because it is the first unique and not null column.

3. **Table without Primary Key or Unique Column**:

```sql
CREATE TABLE logs (
    log_id INT AUTO_INCREMENT,
    log_message TEXT
);
```

- InnoDB creates a hidden clustered index `GEN_CLUST_INDEX` on a synthetic column with row IDs.

### Secondary Index

**Definition**:
Indexes other than the primary (clustered) index are secondary indexes. They do not determine the physical order of data but are used to improve the performance of queries by providing quick access to rows.

**Characteristics**:
- Secondary indexes include the primary key column(s) and the indexed column(s).

**Example**:

1. **Creating a Secondary Index**:

```sql
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE
);

-- Creating a secondary index on customer_id
CREATE INDEX idx_customer_id ON orders(customer_id);
```

- `order_id` is the clustered index because it is the primary key.
- `idx_customer_id` is a secondary index on `customer_id`.

### Real-Time Examples and Usage

**Example Scenario**:
Consider an online store with the following tables: `users`, `orders`, and `products`.

1. **Table Definitions**:

```sql
CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50),
    email VARCHAR(100)
);

CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    user_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    price DECIMAL(10, 2)
);

CREATE TABLE order_details (
    order_id INT,
    product_id INT,
    quantity INT,
    PRIMARY KEY (order_id, product_id),
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);
```

2. **Clustered Index**:

- `user_id` in `users` table.
- `order_id` in `orders` table.
- `product_id` in `products` table.
- Composite primary key (`order_id`, `product_id`) in `order_details` table.

3. **Creating Secondary Indexes**:

```sql
-- Creating a secondary index on username in the users table
CREATE INDEX idx_username ON users(username);

-- Creating a secondary index on order_date in the orders table
CREATE INDEX idx_order_date ON orders(order_date);

-- Creating a secondary index on product_name in the products table
CREATE INDEX idx_product_name ON products(product_name);
```

**Usage of Indexes in Queries**:

1. **Using Clustered Index**:

```sql
-- Efficiently retrieves a user by their primary key (clustered index)
SELECT * FROM users WHERE user_id = 1;
```

2. **Using Secondary Index**:

```sql
-- Efficiently retrieves orders by order_date using a secondary index
SELECT * FROM orders WHERE order_date = '2023-01-01';

-- Efficiently retrieves a user by username using a secondary index
SELECT * FROM users WHERE username = 'john_doe';

-- Efficiently retrieves products by product_name using a secondary index
SELECT * FROM products WHERE product_name LIKE 'Laptop%';
```

### Index Types Supported by MySQL

- **B-Tree Indexes**: The default and most commonly used type, suitable for most queries. Supports exact matches and range queries.
- **Hash Indexes**: Supported by the MEMORY storage engine, suitable for exact match queries but not range queries.

**Example of Creating B-Tree and Hash Indexes**:

```sql
-- B-Tree index (default)
CREATE INDEX idx_btree ON orders(order_date);

-- Hash index (only supported by MEMORY storage engine)
CREATE TABLE hash_table (
    id INT PRIMARY KEY,
    name VARCHAR(50),
    INDEX USING HASH (name)
) ENGINE = MEMORY;
```

### Summary

- **Clustered Index**: Determines the physical order of data. In InnoDB, the primary key is the clustered index. If no primary key is defined, the first unique and not null column is used. If neither is defined, a hidden clustered index is created.
- **Secondary Index**: Indexes other than the primary index, used to improve query performance. Secondary indexes contain the primary key and the indexed column(s).
- **Index Types**: MySQL supports B-Tree and Hash indexes.

Indexes are crucial for optimizing query performance by enabling faster data retrieval, ensuring efficient database operations.
