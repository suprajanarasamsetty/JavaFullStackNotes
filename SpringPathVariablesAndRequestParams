### Understanding `@RequestParam` and `@PathVariable` in Spring MVC

In Spring MVC, `@RequestParam` and `@PathVariable` annotations are used to extract values from the request URI, but they serve slightly different purposes based on where the data is located in the request.

### `@RequestParam`

- **Purpose**: `@RequestParam` is used to extract query parameters from the URL. Query parameters are the parts of a URL that come after the `?` symbol and are usually in the format `key=value`.
- **Encoding**: Since values are taken from the query string, they are encoded (e.g., spaces are replaced with `%20`).
- **Use Case**: Commonly used in forms or when extracting data that is not part of the main URL path.

### Example of `@RequestParam`

Consider a form submission for student registration. Here’s how you can use `@RequestParam` to extract form data:

#### Step-by-Step Implementation

1. **Student Registration Form** (HTML form):

   ```html
   <!-- registration.html -->
   <form action="/submit" method="POST">
       <label>First Name:</label>
       <input type="text" name="firstName">
       <label>Last Name:</label>
       <input type="text" name="lastName">
       <label>Email:</label>
       <input type="email" name="email">
       <label>Major:</label>
       <input type="text" name="major">
       <label>Password:</label>
       <input type="password" name="password">
       <button type="submit">Submit</button>
   </form>
   ```

2. **Controller to Handle Form Data**:

   ```java
   // StudentController.java
   package com.sample.controller;

   import com.sample.model.Student;
   import org.springframework.stereotype.Controller;
   import org.springframework.ui.Model;
   import org.springframework.web.bind.annotation.RequestMapping;
   import org.springframework.web.bind.annotation.RequestMethod;
   import org.springframework.web.bind.annotation.RequestParam;

   @Controller
   public class StudentController {

       @RequestMapping(value = "/submit", method = RequestMethod.POST)
       public String display(Model model,
                             @RequestParam("firstName") String firstName,
                             @RequestParam("lastName") String lastName,
                             @RequestParam("email") String email,
                             @RequestParam("major") String major,
                             @RequestParam("password") String password) {
           // Creating a new student object with the submitted data
           Student student = new Student();
           student.setFirstName(firstName);
           student.setLastName(lastName);
           student.setEmail(email);
           student.setMajor(major);
           student.setPassword(password);

           // Adding attributes to the model to be displayed in the view
           model.addAttribute("firstName", firstName);
           model.addAttribute("lastName", lastName);
           model.addAttribute("email", email);
           model.addAttribute("major", major);
           model.addAttribute("password", password);

           // Returning the name of the JSP page to be displayed
           return "display.jsp";
       }
   }
   ```

3. **Display Page (`display.jsp`)**:

   ```jsp
   <%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%>
   <!DOCTYPE html>
   <html>
   <head>
       <meta charset="ISO-8859-1">
       <title>Student Details</title>
   </head>
   <body>
       <h3>Student Details</h3>
       <table border="1">
           <tr>
               <td>First Name</td>
               <td>${firstName}</td>
           </tr>
           <tr>
               <td>Last Name</td>
               <td>${lastName}</td>
           </tr>
           <tr>
               <td>Email</td>
               <td>${email}</td>
           </tr>
           <tr>
               <td>Major</td>
               <td>${major}</td>
           </tr>
           <tr>
               <td>Password</td>
               <td>${password}</td>
           </tr>
       </table>
   </body>
   </html>
   ```

#### How `@RequestParam` Works

- **URL Example**: A form is submitted to `/submit`, and the data from input fields are sent as part of the request body.
- **Extraction**: `@RequestParam` extracts each field from the form data and assigns it to the corresponding method parameters.

### Real-World Scenarios for `@RequestParam`

1. **Form Submissions**: Collecting data from user inputs like registration forms, login forms, or search bars.
2. **Filtering and Sorting**: Using query parameters to filter or sort data in a list, e.g., `/products?category=electronics&sort=price`.
3. **Pagination**: Handling page and size parameters to navigate through paginated results, e.g., `/products?page=1&size=20`.

### `@PathVariable`

- **Purpose**: `@PathVariable` is used to extract values directly from the URI path. It matches placeholders defined in the request mapping URL.
- **Encoding**: As it extracts values from the path, it doesn’t handle encoding.
- **Use Case**: Typically used when the data forms part of the resource URL, such as identifying a specific resource by its ID.

### Example of `@PathVariable`

Consider a controller that adds two numbers directly from the URL.

#### Implementation:

1. **Controller to Handle the Addition**:

   ```java
   // AddController.java
   package com.sample.controller;

   import org.springframework.stereotype.Controller;
   import org.springframework.web.bind.annotation.PathVariable;
   import org.springframework.web.bind.annotation.RequestMapping;

   @Controller
   public class AddController {

       // URL Mapping to extract two numbers and perform addition
       @RequestMapping("/add/{n1}/{n2}")
       public void add(@PathVariable int n1, @PathVariable int n2) {
           // Logic to print the sum of two numbers
           System.out.println("Sum: " + (n1 + n2));
       }
   }
   ```

#### How `@PathVariable` Works

- **URL Example**: If a user navigates to `/add/10/20`, the numbers `10` and `20` are extracted as `n1` and `n2`.
- **Execution**: The extracted numbers are used in the method logic (in this case, to print their sum).

### Real-World Scenarios for `@PathVariable`

1. **Dynamic URL Handling**: Fetching data based on a specific identifier, like user profiles (`/users/{id}`) or product details (`/products/{productId}`).
2. **CRUD Operations**: Identifying resources in REST APIs for operations like delete (`/delete/{id}`) or update (`/update/{id}`).
3. **Path Navigation**: Navigating content based on categories or hierarchies, such as browsing through a blog (`/blog/{category}/{postId}`).

### Summary

- **`@RequestParam`** is ideal for extracting data from query strings or form submissions, handling data typically encoded in key-value pairs.
- **`@PathVariable`** extracts data from URL paths, making it excellent for defining routes that involve dynamic segments or identifiers.
- Both annotations are essential in building dynamic, flexible, and user-friendly web applications where the URL structure and input data play critical roles in how the application responds to requests.
