### Dependency Injection (DI) in Spring Explained with Real-Time Examples

Dependency Injection (DI) is a design pattern that helps create loosely coupled applications by allowing the Spring IoC (Inversion of Control) container to inject dependencies into your classes rather than your classes managing these dependencies themselves. DI can be achieved in Spring through three primary methods: Constructor Injection, Setter Injection, and Field Injection. Let’s explore each type with simple, real-world examples.

### Scenario: E-Commerce Application with Order Processing

Imagine an e-commerce application with the following components:

1. **OrderService**: Responsible for handling orders.
2. **PaymentService**: Responsible for processing payments.
3. **NotificationService**: Sends notifications to customers.

Each of these services needs dependencies injected to perform their tasks. We will use the different types of DI to inject these dependencies.

### 1. Constructor Injection

**What it is**: Dependencies are injected through a class constructor. This means that when an object is created, its dependencies are immediately provided.

**Advantages**:
- Promotes immutability because dependencies are set once and cannot be changed.
- Guarantees that the object is fully initialized with all required dependencies.

**Disadvantages**:
- If a class has many dependencies, the constructor can become too long and hard to read.

**Best used when**: Dependencies are essential for the class’s functionality and should not change after construction.

#### Example: Using Constructor Injection in OrderService

Let's use `OrderService`, which depends on `PaymentService` and `NotificationService`.

```java
// PaymentService interface
public interface PaymentService {
    void processPayment(double amount);
}

// Implementation of PaymentService
public class CreditCardPaymentService implements PaymentService {
    @Override
    public void processPayment(double amount) {
        System.out.println("Processing credit card payment of: $" + amount);
    }
}

// NotificationService interface
public interface NotificationService {
    void sendNotification(String message);
}

// Implementation of NotificationService
public class EmailNotificationService implements NotificationService {
    @Override
    public void sendNotification(String message) {
        System.out.println("Sending email notification: " + message);
    }
}

// OrderService using Constructor Injection
public class OrderService {
    private final PaymentService paymentService;
    private final NotificationService notificationService;

    // Constructor Injection of dependencies
    public OrderService(PaymentService paymentService, NotificationService notificationService) {
        this.paymentService = paymentService;
        this.notificationService = notificationService;
    }

    public void placeOrder(double amount) {
        paymentService.processPayment(amount);
        notificationService.sendNotification("Order placed successfully.");
    }
}
```

**Configuration**:

```java
@Configuration
public class AppConfig {
    @Bean
    public PaymentService paymentService() {
        return new CreditCardPaymentService();
    }

    @Bean
    public NotificationService notificationService() {
        return new EmailNotificationService();
    }

    @Bean
    public OrderService orderService() {
        return new OrderService(paymentService(), notificationService());
    }
}
```

### 2. Setter Injection

**What it is**: Dependencies are injected through public setter methods after the object is created.

**Advantages**:
- Allows changing dependencies after the object is constructed.
- Suitable for optional dependencies that can be set only if needed.

**Disadvantages**:
- The object might not be fully initialized if setters are not called, leading to potential errors.

**Best used when**: Dependencies are optional or might change during the object’s lifecycle.

#### Example: Using Setter Injection in OrderService

```java
// OrderService using Setter Injection
public class OrderService {
    private PaymentService paymentService;
    private NotificationService notificationService;

    // Setter for PaymentService
    public void setPaymentService(PaymentService paymentService) {
        this.paymentService = paymentService;
    }

    // Setter for NotificationService
    public void setNotificationService(NotificationService notificationService) {
        this.notificationService = notificationService;
    }

    public void placeOrder(double amount) {
        if (paymentService != null) {
            paymentService.processPayment(amount);
        }
        if (notificationService != null) {
            notificationService.sendNotification("Order placed successfully.");
        }
    }
}
```

**Configuration**:

```java
@Configuration
public class AppConfig {
    @Bean
    public PaymentService paymentService() {
        return new CreditCardPaymentService();
    }

    @Bean
    public NotificationService notificationService() {
        return new EmailNotificationService();
    }

    @Bean
    public OrderService orderService() {
        OrderService orderService = new OrderService();
        orderService.setPaymentService(paymentService());
        orderService.setNotificationService(notificationService());
        return orderService;
    }
}
```

### 3. Field Injection

**What it is**: Dependencies are injected directly into the fields of a class, typically using the `@Autowired` annotation.

**Advantages**:
- Simplifies the code by removing the need for setters or constructors.
- Reduces boilerplate code, making classes look cleaner.

**Disadvantages**:
- Harder to test because dependencies are injected directly into private fields.
- Breaks encapsulation and can lead to less maintainable code.

**Best used when**: You want to minimize boilerplate code and aren’t concerned with testing complexities.

#### Example: Using Field Injection in OrderService

```java
// OrderService using Field Injection
public class OrderService {

    @Autowired
    private PaymentService paymentService;

    @Autowired
    private NotificationService notificationService;

    public void placeOrder(double amount) {
        paymentService.processPayment(amount);
        notificationService.sendNotification("Order placed successfully.");
    }
}
```

**Configuration**:

```java
@Configuration
public class AppConfig {

    @Bean
    public PaymentService paymentService() {
        return new CreditCardPaymentService();
    }

    @Bean
    public NotificationService notificationService() {
        return new EmailNotificationService();
    }

    @Bean
    public OrderService orderService() {
        return new OrderService(); // Dependencies will be injected automatically
    }
}
```

### Summary of Real-Time Scenario

1. **Constructor Injection**: We used the constructor to inject `PaymentService` and `NotificationService` into `OrderService`, ensuring all dependencies are set during object creation. This approach is ideal when all dependencies are required.

2. **Setter Injection**: We used setters to provide `PaymentService` and `NotificationService` after creating `OrderService`. This approach is flexible and useful when dependencies are optional or may change over time.

3. **Field Injection**: We directly injected dependencies into fields using `@Autowired`, which minimized boilerplate code but made testing slightly more complex.

### Conclusion

These three types of Dependency Injection allow Spring to manage dependencies efficiently, ensuring that your application components are loosely coupled, more modular, and easy to maintain. The choice of DI method depends on your specific needs, such as immutability, flexibility, or simplicity of code.
